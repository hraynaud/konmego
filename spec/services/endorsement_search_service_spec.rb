require 'set'
require 'rails_helper'
include TestDataHelper::Relationships
include TestDataHelper::Utils

describe EndorsementSearchService do # rubocop:disable Metrics/BlockLength
  before(:all) do
    clear_db
    setup_relationship_data
  end

  after(:all) do
    clear_db
  end

  describe '.search' do # rubocop:disable Metrics/BlockLength
    context 'by topic' do # rubocop:disable Metrics/BlockLength
      context 'Single paths results' do # rubocop:disable Metrics/BlockLength
        it 'returns path for topic directly endorsed by person ' do
          #------------------------------------------------------------------------------
          # fauzi -- ENDORSES('Cooking') --> franky ( A--> KNOWS & ENDORSES -->B )
          #------------------------------------------------------------------------------
          mock_like_terms('Cooking')
          results = EndorsementSearchService.search @fauzi, topic_name: 'Cooking', hops: 1, tolerance: 0.99,
                                                            vector: false
          expect_actual_to_match_expected results, 'Cooking', [[@fauzi]], @fauzi, @franky

        end

        it 'returns path for topic endorsed indirectly through direct contact' do
          #------------------------------------------------------------------------------
          # nuno -- KNOWS --> tisha --> ENDORSES('Composer') --> Person
          #  ( A--> KNOWS -->B KNOWS & ENDORSES --> C)
          #------------------------------------------------------------------------------
          mock_like_terms('Composer')
          results = EndorsementSearchService.search @nuno, topic_name: 'Composer', hops: 1, vector: false
          expect_actual_to_match_expected results, 'Composer', [[@nuno, @tisha]], @tisha, @vince
        end

        it 'finds path to contacts within default distance = 3' do
          #------------------------------------------------------------------------------
          # fauzi --> KNOWS --> franky --> KNOWS--> (nuno) --> KNOWS --> (tisha)  ENDORSES --> (vince)
          #------------------------------------------------------------------------------
          mock_like_terms('Composer')
          results = EndorsementSearchService.search @fauzi, topic_name: 'Composer', vector: false
          expect_actual_to_match_expected results, 'Composer', [[@fauzi, @franky, @nuno, @tisha]], @tisha, @vince
        end

        it 'finds path the topic as long as endorsee is within specified num hops' do

          #------------------------------------------------------------------------------
          # ["Gilber", "Elsa ", "Stan ", "Nuno ", "Franky","Fauzi"]
          #------------------------------------------------------------------------------
          mock_like_terms('Cooking')
          results = EndorsementSearchService.search @gilbert, topic_name: 'Cooking', hops: 5, vector: false
          expect_actual_to_match_expected results, 'Cooking', [[@gilbert, @elsa, @stan, @nuno, @franky, @fauzi]], @fauzi,
                                          @franky
        end

        it "doesn't find path if specified it too short" do
          #------------------------------------------------------------------------------
          # fauzi --> KNOWS --> franky --> KNOWS--> (nuno) --> KNOWS --> (tisha)  ENDORSES --> (vince:NOT_RETURNED)
          #------------------------------------------------------------------------------
          mock_like_terms('Composer')
          results = EndorsementSearchService.search @fauzi, topic_name: 'Composer', hops: 2, vector: false
          expect(results.to_set).to eq(empty_set)
        end

      end

      context 'multiple paths to endorsee' do

        context 'finds multiple paths to contacts that have endorsed the topic by specified depth' do

          # ------------------------------------------------------------------------------
          # PATH 1
          # ["Elsa ", "Stan ", "Nuno ", "Wid", "Rico"]
          #------------------------------------------------------------------------------

          #------------------------------------------------------------------------------
          #  PATH 2
          # ["Elsa ", "Stan ", "Nuno ", "Franky "]
          #------------------------------------------------------------------------------

          it 'finds first path' do
            mock_like_terms('Beat making')
            results = EndorsementSearchService.search(@elsa, topic_name: 'Beat Making', hops: 4, vector: false)
            expect_actual_to_match_expected(results, 'Beat Making',
                                            [[@elsa, @stan, @nuno], [@elsa, @stan, @nuno, @wid, @rico]], @nuno, @franky, 0)
            expect_actual_to_match_expected(results, 'Beat Making',
                                            [[@elsa, @stan, @nuno], [@elsa, @stan, @nuno, @wid, @rico]], @rico, @wid, 1)
          end

        end

        it "doesn't include paths exceeding max distance" do
          # ------------------------------------------------------------------------------
          # PATH 1
          # ["Vince ", "Tish ", "Nuno ", "Wid"]
          #------------------------------------------------------------------------------

          #------------------------------------------------------------------------------
          #  PATH 2 --INCLUDED
          # ["Vine ", "Tisha", "Nuno ", "Stan", "Elsa", "Herby"]
          #------------------------------------------------------------------------------
          mock_like_terms('Software')
          results = EndorsementSearchService.search @vince, topic_name: 'Software', hops: 4, vector: false
          expect_actual_to_match_expected results, 'Software',
                                          [[@vince, @tisha, @nuno], [@vince, @tisha, @nuno, @stan, @elsa]], @nuno, @wid, 1
          expect_actual_to_match_expected results, 'Software',
                                          [[@vince, @tisha, @nuno], [@vince, @tisha, @nuno, @stan, @elsa]], @elsa, @herby, 0

          #------------------------------------------------------------------------------
          #  PATH 2 -- NOT INCLUDED
          # ["Vince ", "Tisha", "Nuno ", "Stan", "Elsa", "Herby"]
          #------------------------------------------------------------------------------
          mock_like_terms('Software')
          results = EndorsementSearchService.search @vince, topic_name: 'Software', hops: 3, vector: false
          expect_actual_to_match_expected results, 'Software', [[@vince, @tisha, @nuno]], @nuno, @wid, 0
        end

        it 'retuns the shortest path' do
          #------------------------------------------------------------------------------
          # herby -KNOWS-> elsa -KNOWS->stan
          #------------------------------------------------------------------------------

          # NOT returned since herby doesn't need to through sar to get to elsa.
          #------------------------------------------------------------------------------
          # herby -KNOWS-> sar -KNOWS-> elsa -KNOWS->stan
          #------------------------------------------------------------------------------
          mock_like_terms('Basketball')
          results = EndorsementSearchService.search @herby, topic_name: 'Basketball', vector: false

          expect(@herby.friends_with?(@sar)).to be true
          expect(@elsa.friends_with?(@sar)).to be true
          expect(results.count).to eq 1
          expect_actual_to_match_expected results, 'Basketball', [[@herby, @elsa]], @elsa, @stan

        end

      end
    end

    context 'Similarity Search' do
      before(:each) do
        @topic = TopicService.find_or_create({ name: 'Football' })
        @endorsement = create_endorsement(@gilbert, @sar, @topic,
                                          'Sar is an amazing futbol player. When he is on the pitch he reminds of of the great Pele')
        @text = to_embed_txt('Who do i know that that knows the rules of Soccer ')
      end

      after(:each) do
        @endorsement.destroy
      end

      it 'returns path for similarity search' do
        #------------------------------------------------------------------------------
        # stan -- KNOWS -- elsa -- KNOWS -- sar <-- gilbert endorse("Football")
        #------------------------------------------------------------------------------

        results = EndorsementSearchService.search(@stan, vector: true, topic_name: @topic.name,
                                                         query: @text, hops: 2,
                                                         tolerance: 0.70)
        expect_actual_to_match_expected results, @topic.name,
                                        [[@stan, @elsa, @gilbert]], @gilbert, @sar, 0
      end

      it 'finds path to contacts that have endorsed the topic within specified hops' do
        #------------------------------------------------------------------------------
        # jean -- KNOWS - vince -- KNOWS -- tisha -- KNOWS--nuno --KNOWS -- stan
        # -- KNOWS -- elsa -- KNOWS -- sar <-- gilbert endorse("Football")
        #------------------------------------------------------------------------------

        results = EndorsementSearchService.search @jean, vector: true, topic_name: @topic.name,
                                                         query: @text, hops: 6,
                                                         tolerance: 0.70
        expect_actual_to_match_expected results, @topic.name,
                                        [[@jean, @vince, @tisha, @nuno, @stan, @elsa, @gilbert]], @gilbert, @sar, 0
      end
    end
  end

end

def expect_actual_to_match_expected(results, topic, paths, from, to, index = 0) # rubocop:disable Metrics/ParameterLists
  endorsement = results.pluck(:e)[index]
  expect(endorsement.endorser).to eq(from)
  expect(endorsement.endorsee).to eq(to)
  expect(endorsement.topic.name).to eq(topic)
  expect_actual_paths_to_contain_expected(results, paths)
end

def expect_actual_paths_to_contain_expected(results, expected_paths)
  actual_paths = results.pluck(:all_paths)
  expect(results.count).to eq expected_paths.count
  expect(actual_paths.sort).to eq(expected_paths.sort)
end

def set_llm_defaults
  allow(OllamaService).to receive(:embedding).and_return

  allow(OllamaService).to receive(:completion).and_return('this is a completion')
end

def futbol_search_embedding
  [
    0.22633294761180878,
    -0.19035762548446655,
    -0.023539714515209198,
    -0.12437044829130173,
    -0.04584153741598129,
    0.0670965239405632,
    0.09996140003204346,
    0.0609431192278862,
    -0.27983343601226807,
    0.34303826093673706,
    -0.19011561572551727,
    -0.46221914887428284,
    0.04768603295087814,
    0.11284012347459793,
    0.0881134420633316,
    0.1172095537185669,
    -0.0782942920923233,
    -0.03893081843852997,
    -0.23479586839675903,
    -0.10359254479408264,
    0.09544122219085693,
    -0.1004268005490303,
    0.11037327349185944,
    0.10462930798530579,
    -0.07949694991111755,
    0.03903089091181755,
    -0.1360587775707245,
    0.0893544927239418,
    -0.16892585158348083,
    -0.04846641421318054,
    -0.1855374276638031,
    0.18618974089622498,
    0.4301011860370636,
    0.30117976665496826,
    0.05309854447841644,
    0.042213425040245056,
    -0.034522075206041336,
    -0.026113569736480713,
    0.12922541797161102,
    0.1572350412607193,
    -0.19834867119789124,
    -0.15272825956344604,
    0.05318882316350937,
    0.1642691195011139,
    0.19810616970062256,
    0.28052976727485657,
    0.015929073095321655,
    -0.12107586115598679,
    -0.23344050347805023,
    0.14444486796855927,
    -0.0505397655069828,
    -0.05715125426650047,
    -0.04275349900126457,
    -0.07548607885837555,
    0.28596651554107666,
    0.20889902114868164,
    0.06609216332435608,
    -0.10967370867729187,
    -0.16758446395397186,
    0.06237742677330971,
    -0.07771800458431244,
    -0.12893983721733093,
    -0.1861107051372528,
    0.19036605954170227,
    -0.2177014946937561,
    -0.020609375089406967,
    -0.2691856026649475,
    0.05794917419552803,
    0.038245849311351776,
    0.00827057659626007,
    0.2215147465467453,
    -0.15305617451667786,
    0.00249295961111784,
    -0.04747270792722702,
    0.20265746116638184,
    0.013721663504838943,
    -0.09477324783802032,
    -0.2257397174835205,
    -0.03949137032032013,
    0.014356333762407303,
    -0.3107728958129883,
    -0.12177126109600067,
    -0.17904072999954224,
    -0.152963787317276,
    0.08578798174858093,
    0.03215871751308441,
    -0.1311764419078827,
    -0.14159747958183289,
    -0.1289808303117752,
    0.04432164877653122,
    -0.2768190801143646,
    -0.17102551460266113,
    0.23384784162044525,
    0.005214992444962263,
    0.15151840448379517,
    0.32428765296936035,
    0.1966373771429062,
    -0.35921216011047363,
    0.055513497442007065,
    -0.07444996386766434,
    -0.01894703507423401,
    -0.035873908549547195,
    -0.05283845216035843,
    0.25790905952453613,
    -0.29974809288978577,
    0.08346542716026306,
    -0.12498362362384796,
    0.2886236906051636,
    0.004583113361150026,
    0.008244693279266357,
    -0.1079755425453186,
    0.03064042329788208,
    -0.1382046341896057,
    0.11004427820444107,
    -0.02332284301519394,
    0.44642847776412964,
    -0.2776835560798645,
    -0.001765620894730091,
    0.06493508815765381,
    -0.0018313173204660416,
    -0.02465829811990261,
    0.06931930035352707,
    0.17480342090129852,
    0.06017816811800003,
    0.10281895101070404,
    -0.08553069084882736,
    -0.041443727910518646,
    -5.5405236452879215e-33,
    -0.047409169375896454,
    -0.04066115617752075,
    -0.17275796830654144,
    0.1612754464149475,
    -0.20363229513168335,
    0.06740745902061462,
    0.18740911781787872,
    -0.10849060863256454,
    0.013182445429265499,
    -0.06763949990272522,
    0.012459087185561657,
    0.4545367360115051,
    -0.021786343306303024,
    0.2070053517818451,
    0.15757611393928528,
    0.26501110196113586,
    0.08977417647838593,
    -0.0669475793838501,
    -0.10194098949432373,
    0.07534164935350418,
    0.12227865308523178,
    0.2079857587814331,
    -0.0505809411406517,
    -0.05283869802951813,
    -0.20228400826454163,
    -0.18935801088809967,
    -0.19220410287380219,
    -0.09588618576526642,
    -0.1316872239112854,
    0.0773705393075943,
    0.054206185042858124,
    -0.07650744915008545,
    -0.1614227145910263,
    -0.10696406662464142,
    -0.011601685546338558,
    -0.08976902067661285,
    0.17700651288032532,
    -0.016182053834199905,
    0.038888439536094666,
    0.06255174428224564,
    0.033218059688806534,
    -0.21405377984046936,
    -0.27110356092453003,
    0.10815834999084473,
    0.06739272177219391,
    -0.02246199920773506,
    0.04223579913377762,
    -0.0702897161245346,
    0.08660683780908585,
    0.15215076506137848,
    -0.048878178000450134,
    -0.10489274561405182,
    0.15523508191108704,
    -0.35932284593582153,
    0.34672659635543823,
    0.020960025489330292,
    -0.10933011770248413,
    0.17029646039009094,
    -0.19145755469799042,
    -0.0760950967669487,
    -0.18304143846035004,
    0.038274116814136505,
    0.12241093814373016,
    -0.2598596215248108,
    -0.1057479977607727,
    -0.09678597003221512,
    0.0829186961054802,
    0.02771434187889099,
    0.20058998465538025,
    -0.04328416660428047,
    -0.1330428123474121,
    0.03223882243037224,
    -0.008989367634057999,
    0.11429712176322937,
    -0.1301300972700119,
    0.13158400356769562,
    0.12438680231571198,
    -0.10799403488636017,
    0.03606659173965454,
    0.19330450892448425,
    -0.21060553193092346,
    0.1978297233581543,
    -0.2875213623046875,
    -0.1845427006483078,
    0.04737976938486099,
    -0.08092654496431351,
    0.2047402560710907,
    -0.4406335651874542,
    0.0077714379876852036,
    -0.22703538835048676,
    -0.24658671021461487,
    0.061799466609954834,
    -0.0683467909693718,
    0.03442610427737236,
    -0.24001385271549225,
    -8.479824494316004e-33,
    -0.11948803067207336,
    -0.21030548214912415,
    -0.05186803638935089,
    0.2592489719390869,
    0.15715324878692627,
    0.16405725479125977,
    -0.0017446842975914478,
    0.036384038627147675,
    0.18046484887599945,
    0.11399166285991669,
    -0.07200338691473007,
    0.0874330997467041,
    -0.1981060802936554,
    -0.31234049797058105,
    -0.37989330291748047,
    -0.0943397581577301,
    -0.24182160198688507,
    0.05388472601771355,
    -0.03728204965591431,
    0.44204503297805786,
    -0.06175289675593376,
    -0.279140442609787,
    -0.10587415099143982,
    -0.06698580086231232,
    -0.15011994540691376,
    0.008491631597280502,
    -0.04203551635146141,
    -0.3487852215766907,
    0.015563515946269035,
    0.07707388699054718,
    0.19052055478096008,
    -0.146333709359169,
    0.1251603364944458,
    0.04030017554759979,
    -0.0023193322122097015,
    0.030747245997190475,
    0.24035850167274475,
    -0.19486004114151,
    -0.047020770609378815,
    -0.07582838833332062,
    -0.022802483290433884,
    0.05533226579427719,
    0.03984079137444496,
    -0.004479924216866493,
    0.19066530466079712,
    -0.04147342965006828,
    -0.19416223466396332,
    -0.17686721682548523,
    -0.07231509685516357,
    0.06312626600265503,
    0.36249494552612305,
    0.002053476870059967,
    -0.1211717426776886,
    -0.13648094236850739,
    0.276756227016449,
    -0.10193325579166412,
    0.13938122987747192,
    -0.2941047251224518,
    0.06867870688438416,
    -0.16243982315063477,
    0.204727441072464,
    -0.032983310520648956,
    -0.11513570696115494,
    0.37031522393226624,
    0.10177065432071686,
    -0.04208049178123474,
    -0.23338809609413147,
    0.24801748991012573,
    -0.3525159955024719,
    -0.0459318570792675,
    -0.1411278247833252,
    0.013021893799304962,
    -0.19205334782600403,
    0.09456881135702133,
    -0.1301019787788391,
    -0.022810397669672966,
    -0.2238108217716217,
    0.295218288898468,
    0.14076833426952362,
    -0.034264132380485535,
    0.015241067856550217,
    -0.04958103969693184,
    -0.016904354095458984,
    0.030132809653878212,
    0.056794434785842896,
    0.2621316909790039,
    0.11053183674812317,
    0.14820127189159393,
    0.31531915068626404,
    -0.03719887137413025,
    0.07807842642068863,
    0.027815887704491615,
    0.09476447105407715,
    -0.12094011902809143,
    -0.0057091740891337395,
    -1.0366269975747855e-7,
    -0.16500651836395264,
    0.17046666145324707,
    0.05053331330418587,
    0.24179501831531525,
    -0.014592290855944157,
    0.0037446189671754837,
    -0.15004600584506989,
    -0.01442838553339243,
    0.14572803676128387,
    0.0148268211632967,
    -0.0447797030210495,
    0.12042444944381714,
    -0.1398027092218399,
    -0.030939742922782898,
    0.2682403326034546,
    -0.07428343594074249,
    -0.27287203073501587,
    0.158782497048378,
    0.09260880947113037,
    -0.033648088574409485,
    0.2764125466346741,
    -0.09803969413042068,
    -0.2980023920536041,
    -0.011450239457190037,
    0.04966537654399872,
    -0.327411413192749,
    -0.3037837743759155,
    -0.33924949169158936,
    -0.28633254766464233,
    0.10827654600143433,
    0.10378631949424744,
    -0.2474287450313568,
    0.021087314933538437,
    -0.15954485535621643,
    0.02956746518611908,
    0.18472108244895935,
    0.03176236152648926,
    -0.5079864263534546,
    -0.16884882748126984,
    -0.021807899698615074,
    0.035557448863983154,
    0.09617164731025696,
    -0.15558573603630066,
    0.17103004455566406,
    0.22268512845039368,
    -0.1951494812965393,
    -0.05559945106506348,
    -0.04909374192357063,
    -0.07692721486091614,
    -0.13321487605571747,
    -0.07225098460912704,
    0.1887298822402954,
    -0.02086927928030491,
    -0.210220605134964,
    0.15790024399757385,
    0.19913837313652039,
    0.16454243659973145,
    -0.020947977900505066,
    0.13289783895015717,
    -0.26252463459968567,
    0.31953996419906616,
    0.20417912304401398,
    0.17816391587257385,
    0.020328545942902565
  ]
end

def futbol_endorsement_embedding
  [
    0.08721233904361725,
    0.20295581221580505,
    -0.06191732734441757,
    -0.4224141240119934,
    -0.010554051026701927,
    0.1913665533065796,
    0.5868902802467346,
    0.24060729146003723,
    0.037190526723861694,
    0.3370820879936218,
    -0.2737589180469513,
    -0.3402847647666931,
    -0.07328185439109802,
    0.24077585339546204,
    0.18925343453884125,
    -0.15722282230854034,
    -0.15075376629829407,
    -0.0975111722946167,
    0.13697102665901184,
    -0.17338699102401733,
    0.05034163221716881,
    0.10968966037034988,
    0.23803988099098206,
    -0.09931683540344238,
    -0.24563516676425934,
    0.003693068865686655,
    0.10581491887569427,
    0.2767093777656555,
    -0.2001313716173172,
    -0.07125255465507507,
    -0.02006816491484642,
    0.11892707645893097,
    0.1540672928094864,
    0.13395297527313232,
    -0.3068679869174957,
    0.23882155120372772,
    0.06794974207878113,
    0.2455301582813263,
    -0.07982748746871948,
    0.08660248667001724,
    -0.146256685256958,
    -0.10215165466070175,
    -0.01391228474676609,
    0.1131407842040062,
    0.01180945336818695,
    -0.04368577525019646,
    0.06183247268199921,
    -0.3099643886089325,
    -0.034903764724731445,
    -0.06510943174362183,
    -0.17012664675712585,
    0.02907160297036171,
    0.11614958941936493,
    0.06866496056318283,
    0.3916873633861542,
    0.03171359747648239,
    -0.11014540493488312,
    0.03709961473941803,
    -0.07835257053375244,
    -0.027509339153766632,
    -0.12442843616008759,
    0.1677805781364441,
    -0.20612196624279022,
    -0.16887947916984558,
    -0.15192696452140808,
    -0.3633342385292053,
    -0.12156887352466583,
    0.023375965654850006,
    -0.03481709957122803,
    0.18251311779022217,
    0.08433301746845245,
    -0.06768263876438141,
    0.16182592511177063,
    -0.05506746843457222,
    -0.13679125905036926,
    -0.018961070105433464,
    -0.1459255963563919,
    -0.04857981950044632,
    0.12525224685668945,
    -0.019358336925506592,
    -0.06654436141252518,
    -0.25336775183677673,
    -0.00237067136913538,
    -0.18447256088256836,
    0.09585125744342804,
    -0.14889757335186005,
    0.10333399474620819,
    -0.18959538638591766,
    0.08094523102045059,
    0.05381361395120621,
    0.14540566504001617,
    0.1843879520893097,
    -0.02335398830473423,
    0.13783228397369385,
    0.18320332467556,
    0.0703773945569992,
    0.02025507390499115,
    0.02042534202337265,
    -0.22832649946212769,
    0.22714760899543762,
    0.1347143054008484,
    -0.03136654943227768,
    0.1349603831768036,
    0.13874366879463196,
    -0.07951584458351135,
    0.010600263252854347,
    0.06448572129011154,
    0.26015156507492065,
    -0.11485914885997772,
    -0.15487441420555115,
    -0.21965527534484863,
    0.13525833189487457,
    -0.39347198605537415,
    0.08994939923286438,
    0.012157988734543324,
    0.2213464379310608,
    -0.3342759609222412,
    -0.23552416265010834,
    -0.4150250554084778,
    -0.11929158121347427,
    0.09886893630027771,
    0.134965181350708,
    -0.18210963904857635,
    0.4618980288505554,
    -0.026683859527111053,
    0.027160771191120148,
    0.030036229640245438,
    -7.215403261170041e-33,
    0.04427950829267502,
    0.061298225075006485,
    0.032639287412166595,
    -0.06683436036109924,
    -0.29246553778648376,
    0.19814033806324005,
    -0.10888102650642395,
    -0.2053973227739334,
    -0.017434854060411453,
    0.022311542183160782,
    0.023334737867116928,
    0.3673347234725952,
    -0.20657818019390106,
    0.2898443639278412,
    0.06925978511571884,
    0.14402411878108978,
    -0.3323390781879425,
    -0.026994314044713974,
    -0.074241504073143,
    0.03414405137300491,
    -0.034424494951963425,
    0.25468531250953674,
    -0.024516215547919273,
    -0.23845821619033813,
    0.1338924765586853,
    0.17726317048072815,
    0.08806546032428741,
    -0.18779972195625305,
    -0.1092766523361206,
    0.15181104838848114,
    0.0972362607717514,
    0.02164907567203045,
    -0.24914443492889404,
    -0.1311125010251999,
    -0.0184381864964962,
    -0.1360345482826233,
    -0.21809333562850952,
    0.009635653346776962,
    -0.2560679614543915,
    0.26109418272972107,
    0.3415016531944275,
    -0.2532147765159607,
    -0.2858206629753113,
    0.18027010560035706,
    -0.10842123627662659,
    -0.08109135925769806,
    0.0032339487224817276,
    0.01321559026837349,
    0.3528403043746948,
    -0.024271713569760323,
    0.07361742854118347,
    -0.08778668195009232,
    -0.10326813161373138,
    -0.07937981188297272,
    0.26714587211608887,
    -0.05028253793716431,
    -0.041894443333148956,
    0.02245759405195713,
    0.03658389672636986,
    -0.022090185433626175,
    -0.052163973450660706,
    -0.2931551933288574,
    0.10113517940044403,
    -0.14028441905975342,
    -0.1514831781387329,
    -0.17380240559577942,
    0.01530236192047596,
    0.0180138498544693,
    -0.02211742475628853,
    -0.05724461376667023,
    -0.03665308281779289,
    0.01937924697995186,
    0.021854078397154808,
    -0.28279203176498413,
    -0.25385865569114685,
    -0.019299371168017387,
    0.01873161643743515,
    0.2588879466056824,
    -0.2276059091091156,
    0.3710562586784363,
    -0.2327893227338791,
    0.08140172064304352,
    -0.032416932284832,
    -0.1634235382080078,
    -0.25701141357421875,
    0.17394664883613586,
    0.3497686982154846,
    -0.4077796936035156,
    -0.2450382113456726,
    0.0904192328453064,
    -0.24962666630744934,
    0.08824522793292999,
    0.11217057704925537,
    -0.23762446641921997,
    -0.3086494207382202,
    -3.457314026128602e-33,
    -0.08584049344062805,
    -0.12624870240688324,
    -0.06932417303323746,
    0.2132229506969452,
    -0.08390887081623077,
    -0.09783828258514404,
    0.06884700059890747,
    0.40714365243911743,
    0.05060305818915367,
    0.06245553866028786,
    -0.15189296007156372,
    -0.015047861263155937,
    0.23545438051223755,
    -0.30058103799819946,
    -0.29370900988578796,
    -0.0067976308055222034,
    0.06405460089445114,
    0.2037089467048645,
    -0.09362340718507767,
    0.24792751669883728,
    0.20177659392356873,
    0.07103289663791656,
    0.13762110471725464,
    -0.09501327574253082,
    -0.47116339206695557,
    0.12278342247009277,
    -0.030926961451768875,
    -0.13045789301395416,
    -0.3175705075263977,
    -0.1512007713317871,
    0.11181562393903732,
    -0.02200644090771675,
    0.10731840133666992,
    -0.0869506374001503,
    0.029046449810266495,
    0.2048652172088623,
    0.16349945962429047,
    -0.03307248279452324,
    -0.1550416499376297,
    0.14476166665554047,
    0.15055468678474426,
    0.013449220918118954,
    0.1274619996547699,
    0.15376758575439453,
    0.055716622620821,
    -0.09064049273729324,
    -0.10363591462373734,
    0.03126757591962814,
    -0.08630117774009705,
    -0.021424271166324615,
    -0.009035684168338776,
    0.020794223994016647,
    -0.10220381617546082,
    -0.23638412356376648,
    0.19823938608169556,
    -0.03450106456875801,
    -0.24879148602485657,
    -0.3025597035884857,
    -0.050729550421237946,
    -0.07103952020406723,
    0.0025530457496643066,
    0.011925164610147476,
    -0.09026467055082321,
    0.06417101621627808,
    0.24777114391326904,
    0.05120234563946724,
    -0.23018643260002136,
    -0.03395219147205353,
    -0.13284626603126526,
    0.10601029545068741,
    -0.21317458152770996,
    -0.16006386280059814,
    -0.2742686867713928,
    0.22507673501968384,
    -0.1661575883626938,
    0.21199223399162292,
    -0.06882287561893463,
    0.3107728958129883,
    0.20463529229164124,
    0.015953481197357178,
    0.010169211775064468,
    -0.060941509902477264,
    -0.2015494704246521,
    -0.1669139266014099,
    -0.14707699418067932,
    0.33431506156921387,
    -0.17368832230567932,
    -0.05803064629435539,
    0.15378183126449585,
    0.20128725469112396,
    0.1588844656944275,
    0.09092560410499573,
    -0.10823653638362885,
    0.0340472012758255,
    0.24226988852024078,
    -1.0091544311308098e-7,
    -0.11226377636194229,
    0.07048951089382172,
    -0.06473447382450104,
    0.19895780086517334,
    -0.1371001899242401,
    -0.006237419322133064,
    0.17450232803821564,
    -0.15964384377002716,
    0.04043763130903244,
    0.11295314133167267,
    -0.0768899992108345,
    0.09756316244602203,
    0.012968124821782112,
    0.07055099308490753,
    0.18834999203681946,
    0.03356397897005081,
    -0.23898988962173462,
    0.044767990708351135,
    -0.05877821519970894,
    0.08893129229545593,
    -0.1009097695350647,
    0.027245502918958664,
    0.07748080790042877,
    0.06674543023109436,
    0.007920369505882263,
    0.07978709042072296,
    -0.08991043269634247,
    -0.12363605201244354,
    -0.04357399791479111,
    0.20234638452529907,
    0.15413925051689148,
    0.018127158284187317,
    0.020674429833889008,
    -0.1500558853149414,
    0.0734010636806488,
    0.16696082055568695,
    0.2054995894432068,
    -0.33355528116226196,
    -0.1179053783416748,
    0.025457333773374557,
    0.14474675059318542,
    -0.02064591646194458,
    -0.033407509326934814,
    0.09641462564468384,
    0.1297416388988495,
    -0.03164605051279068,
    -0.054355740547180176,
    -0.10553593188524246,
    -0.0881757140159607,
    0.0692548155784607,
    -0.08890098333358765,
    0.1767929494380951,
    0.07987964153289795,
    -0.04570620134472847,
    -0.006724566221237183,
    0.15919339656829834,
    -0.15115603804588318,
    -0.12875249981880188,
    0.16742920875549316,
    -0.08433468639850616,
    0.11676080524921417,
    0.006102590821683407,
    -0.020608792081475258,
    0.03668083995580673
  ]
end
